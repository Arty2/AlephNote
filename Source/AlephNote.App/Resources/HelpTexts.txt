[Accounts]
AlephNote is based around remotes that come from various plugins.
Here you can specify where your notes are synchronized from/to (normally this is a specific server/service).

Press the (+) Button to add a new remote configuration and select it from the dropdown box.
Then enter your remote-specific configurations.

The following remotes are provided by default:

 - SimpleNote:   Synchronization with the SimpleNote server
 - StandardNote: Synchronization with a StandardFile server
 - Nextcloud:    Synchronization with a Nextcloud server that has the Notes plugin.
 - Filesystem:   Synchronization with raw text files anywhere on your local file system
 - Headless:     No synchronization, all notes exist only in your local repository

You can have multiple configurations saved, but only one is ever active.

[ConfigInterval]
AlephNote uses a background thread to synchronize the local data with the configured remote.
This settings specifies how often the synchronization is triggered.
You can also manually do a sync from a button in the MainWindow.

This does not effect the time it takes to upload a modified note.
AlephNote tries to upload all modified/new notes in a short timespan.

[ConflictResolutionStrategyConfig]
If there are local changes and remote changes an conflict will occur while syncing. These conflicts can resolved in different ways:

1. "Use client version, override server"
   We use our (the local) version. 
   The server version will be overridden after the synchronization.

2. "Use server version, override client"
   We use the server version. 
   The local version will be overridden after the synchronization.

3. "Use client version, create conflict note"
   We use our (the local) version. 
   The server version will be overridden after the synchronization.
   But the (old) server version will be preserved in a new conflict note.

4. "Use server version, create conflict note"
   We use the server version. 
   The local version will be overridden after the synchronization.
   But the (old) local version will be preserved in a new conflict note.

5. "Show conflict resolution dialog"
   Shows a conflict-resolution window when a conflict occcurs.
   This is normally not needed and in most cases option 3. or 4. is a better strategy.

[LaunchOnBoot]
If checked AlephNote automatically starts with Windows.
You can change the "Startup state" to start AlephNote minimized or in the tray area

[CheckForUpdates]
If checked we search for updates of the core app or the plugins.
The test is performed once at startup and uses the github API.

[SendAnonStatistics]
If checked AlephNote does a single ping to my server on startup.
The following data are send:
 - Unique ID
 - Used plugin
 - Note count

I only use this data to motivate me and estimate how many people are actually using AlephNote.

[RememberScroll]
If checked we remember the current scroll position and cursor position per note.
When switching between notes, or when restarting the application the scroll/cursor position is kept persistent.
Can be useful for really long notes or when using only the keyboard for navigation.

[CloseToTray]
Minimize to tray bar instead of closing the main window.
You can still close the app via the menu.

[AutoSortTags]
Tags are automatically sorted alphabetically.
(Attention !) Even without this option the tag order can sometimes get shuffled.
Not all remotes properly implement an ordered list of tags and so the order can get lost in the synchronization.

[NoteSorting]
The ordering of the note sin the list on the left side.

[NotePreviewStyle]
The style how the notes are displayed on the left side.

[Startup]
The startup position, size and state of the application.
You can press (Use current) to insert the current window position and size.

[NoteFontFamily]
The font used for displaying notes.

[ListFontFamily]
The font used in the list on the left side.

[TitleFontFamily]
The font used for the note titles

[SciRectSelection]
Enable rectangular selection (by holding down the Alt key) in the main edit control

[SciMultiSelection]
Enable multiple selection (by holding down the Ctrl key) in the main edit control

[SciZoomable]
Enable zooming in the main edit control (by Control+Scrollwheel)

[SciTabWidth]
The width (aka how many spaces) of a single tab character

[SciUseTabs]
If enabled the (tab) key inserts a tab character, otherwise it inserts multiple spaces.

[SciShowWhitespace]
Display tab and space characters

[DocSearchRegexEngine]
The used RegEx engine for the inline (Control+F) search mode

[LinkMode]
AlephNote can highlight hyperlinks.

### Disabled ###
Hyperlinks are not highlighted and not clickable.

### Highlight only ###
Hyperlinks are highlighted but not interactive.

### Clickable (single click) ###
Hyperlinks are highlighted and are opened when clicked.

### Clickable (double click) ###
Hyperlinks are highlighted and are opened when double-clicked.

### Clickable (ctrl + click) ###
Hyperlinks are highlighted and are opened when clicked while holding (Control).

[MarkdownMode]
AlephNote can syntax-highlight markdown formatted files.
You can either 
 - disable highlighting for all notes
 - enable highlighting for all notes
 - enable highlighting only for notes that have the tag [markdown]

[ListMode]
AlephNote can syntax-highlight todo lists.
You can either 
 - disable highlighting for all notes
 - enable highlighting for all notes
 - enable highlighting only for notes that have the tag [list]

Entries in todo lists have normal markdown/github formatting, e.g.:

    [ ] Do something
    [ ] Do something different
    [X] This is already finished
    [ ] Add more stuff to list

Also allowed are round brackets, square brackets or curly brackets.
You can set an item to checked with an 'x', 'X', '+' or '#'

[GitMirror]
"Local Git Backup" is an additional feature to backup the full history locally.
AlephNote creates in a local folder a git repository and commits all changes of all notes into it.
You can use this to have a full history of all your changes.

(Attention !)
AlephNote uses the locally installed git version.
This means you need to have a working `git` command in your environment.

You can manually edit/configure the git repository, but a normal `git commit` (and eventually  `git push`)
should always be possible.

[GitMirrorDoPush]
After committing the changes execute a `git push` in the repository to push the changed to the default remote.

[GitMirrorSubfolders]
Create a sub-folder for every remote.
This is useful if you plan to occasionally change your active remote,
otherwise every change will look in the git history as an deletion of all notes and inserting of a whole bunch of new notes.

[ShortcutList.Scope]
Every shortcut has an assigned scope in which he his available:

### Whole Window ###
The shortcut is available in the main window

### Notes list ###
The shortcut is only available while the focus is in the list on the left side

### Folder list ###
The shortcut is only available while the focus is in the folder list on the left side
(Folder list only visible if "hierachical note structure" is enabled)

### Notes edit area ###
The shortcut is only available while the focus is in edit area

### System global ###
The shortcut is always available, even when the application is minimized or in the tray area

[RememberLastSelectedNote]
On startup remember and show the note that was selected last time

[UseHierachicalNoteStructure]
If selected you can put notes in folders and subfolders.
Only works if the remote plugin and the remote server support directory information or if "Emulate directories" is enabled.

This replaces the notes view control in the main window to display subfolders in a treeview.

[EmulateHierachicalStructure]
Not all remote account types support subdirectories for notes.
For all unsupported plugins we can "emulate" a directory structure by writing the full path into the note title, seperated by a special character.

You should choose a directory seperator that does not normally appear in you note titles, to prevent conflicts.

This setting does nothing for remote accounts where subdirectories are natively supported.

[SmoothScrollNotesView]
Use smooth scrolling for the left notes view.

Do not enabled this if you have a lot of notes, this increases the drawing load substantially and can lead to UI lag.
Also the effect is only really visible with the 'full preview' setting for the notes preview style.

[AutofocusScintilla]
Automatically put the keyboard focus in the note editor when selecting a note (in the sidebar).

[DeepFolderView]
Show the notes of the currently selected folder and all the notes of all subfolders.
Otherwise only notes directly in the current selected folder are shown

[FolderViewShowRootNode]
Show the root folder (= notes that are not in any directory) 
in the folder list in the top right corner.

[FolderViewShowEmptyPathNode]
Show an additional node "Unsorted notes" in the folder list in the top right corner.
This node contains all notes that are not in any directory.
(= Notes that live in the root)

[FolderViewShowAllNotesNode]
Show an additional node "All notes" in the folder list in the top right corner.
This node displays all available notes, regardless of their directory.

[IsReadOnlyMode]
In readonly mode you cannot edit/create/delete notes.
Only viewign and synchronization is enabled, this prevents accidental edits.

[ShowReadonlyLock]
Display a lock icon in the top right area to toggle between normal and readonly mode.

[LockOnStartup]
Activate the readonly-mode on startup (you cannot change notes until you manually unlock it)

[LockOnMinimize]
Activate the readonly-mode when minimizing the main window (either to taskbar or to the trayarea)

[RawFolderRepo]
The "synchronize with local folder" options synchronizes all your notes with a local folder.
First enable this option and choose an empty folder, the folder will be filled with a textfile for each of your notes.
Every change in AlephNote will (with the next synchronization) be reflected in the folder.
If you enable "Synchronize modifications" etc changes in the folder will also be reflected in AlephNote.

This feature is useful if you want to manage/edit your notes wit another program and only use AlephNote to sync them with a remote provider.

Be aware that this synchronization does not do any conflict resolution, it will always take the latest change in case of conflicting edits.

[RawFolderRepoAllowModification]
Allow modifications of notes in the filesystem to synchronize into AlephNote.
If disabled AlephNote will never react to changes in the fileystem and all edits must happen in this program.

[RawFolderRepoAllowCreation]
Allow creation of new notes in the filesystem.
If enabled you can craete new notes (= new files) in the filesystem and with the next ynchronization they will appear in AlephNote

(!) Please use the correct encoding when creating new notes, otherwise AlephNote could read garbage from the files.

[RawFolderRepoAllowDeletion]
Allow the deletion of notes in the filesystem.
If anebaled you can delete files in the filesystem and the corresponding notes in AlepHNote will also be deleted on the next synchronization.

(!) This is kinda dangerous, because this setting makes it easy to accidentally delete all your notes.
    It is my advise to use some kind of backup/history for your data:
     - either a filesystem with regular snapshots,
     - a remote provider with history
     - or the "local github backup" feature of AlephNote

[RawFolderRepoUseFileWatcher]
If enabled AlephNote listens (under Windows) to the filesystem events to sync after a file in the path has changed.
Unfortunately these events aren't totally reliable, so the time-based synchronization should not be disabled.

[SuppressConnectionProblemPopup]
Do not show traybar tooltips or error dialogs when the synchronisation failed due to connection problems (no network connection, no internet, misconfigured proxy, ...).
Normal errors are still displayed

[SuppressAllSyncProblemsPopup]
Do not shsow any traybar tooltips or error dialogs when the synchronisation fails.
This setting should only ever be set if are in an environment where the server randomly returns invalid data (badly configured proxies, ISP blocking, etc).
Be aware that this suppresses all errors and you can only notice synchronization problems via the log menu (and the tray icon color).

[UseNaturalNoteSort]
Uses instead of a per-character alphabetical sort order an ordering where multi-digit numbers are treated as a single character.
This way numbers (e.g. '1', '2', '10') are ordered by their numerical values.

[GitMirrorAutoGC]
Automatically call 'git gc' after x commits.
The git garbage collector cleans up and compresses the repository.
Set this to 0 to never call 'git gc'.

[RememberPositionAndSize]
Save the current window position and size when closing the window.
This has the effect that the app starts at the same position it was last time.

[RememberState]
Save the current window state (minimized, normal, maximized) when closing the window.
This has the effect that the app starts in the same state it was last time.

[AllowAllLettersInFilename]
If set to true all characters in the Unicode [Letter, Other] category will be  used verbatim in filenames.
Otherwise they will either be stripped away or encoded as '%+codepoint'
This is experimental - in some cases (or some filesystems) this can lead to invalid filenames

[AllowAllCharactersInFilename]
If set to true all characters that are not explicitly forbidden will be used verbatim in filenames.
Otherwise they will either be stripped away or encoded as '%+codepoint'
This is not recommended - with this setting you can definitely create invalid files and/or exceptions in AlephNote

[SingleInstanceMode]
If enabled only a single AlephNote process per repository is allowed.
Even with this setting you can launch AlephNote from two different locations.
Its is not recommended to disable this - two processes that try to write to the same local files will probably result in data corruption.

[UpdateToPrerelease]
Also show updates that are marked as "prerelease".
Be careful - these versions are normally not tested and can include fatal bugs and "features".

[RawFolderRepoSubfolders]
Create a sub-folder for every remote.
This is useful if you plan to occasionally change your active remote,
but want to keep the local synchronization ebaled for all ow them
